{
  "stats": {
    "suites": 15,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2018-06-29T10:57:35.228Z",
    "end": "2018-06-29T10:57:37.315Z",
    "duration": 2087,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "c6b55b3e-3aba-4793-a645-ea371bd40d81",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "057f8826-3a8b-4184-9d79-6bedeadc78e5",
        "title": "Order",
        "fullFile": "/Users/alu/Desktop/test/graphql-microservice/test/model/Order.js",
        "file": "/test/model/Order.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Order \"before all\" hook",
            "timedOut": false,
            "duration": 447,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "const models = await (0, _helpers.initSequelize)();\nUser = models.User;\nOrder = models.Order;\nOrderDetail = models.OrderDetail;\nuser = await User.findOne({ where: { phoneNumber: '18674083822' } });\norder = await Order.findOne();",
            "err": {},
            "isRoot": false,
            "uuid": "77761409-dccf-4632-be41-30d116b68fce",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e410b02f-e668-4334-ac3c-689fc4f21e97",
            "title": "Create",
            "fullFile": "/Users/alu/Desktop/test/graphql-microservice/test/model/Order.js",
            "file": "/test/model/Order.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create an order and an orderDetail",
                "fullTitle": "Order Create should create an order and an orderDetail",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const data = {\n  title,\n  amount: randInt(100),\n  userId: user.id\n};\nconst order = await Order.create(data);\n(0, _chai.expect)(order.dataValues).to.deep.include(data);\n// create OrderDetail\nconst orderDetailData = {\n  name: 'test goods',\n  count: randInt(),\n  price: randInt(66),\n  orderId: order.id\n};\nconst orderDetail = await OrderDetail.create(orderDetailData);\n(0, _chai.expect)(orderDetail.dataValues).to.deep.include(orderDetailData);",
                "err": {},
                "isRoot": false,
                "uuid": "960c1cfb-653b-4ba4-97bd-e63d46d28079",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "960c1cfb-653b-4ba4-97bd-e63d46d28079"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 22,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "8b5f0f8b-1afe-4e30-88c5-5d6196c4ec12",
            "title": "Delete",
            "fullFile": "/Users/alu/Desktop/test/graphql-microservice/test/model/Order.js",
            "file": "/test/model/Order.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete some orders and orderDetails",
                "fullTitle": "Order Delete should delete some orders and orderDetails",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const where = { title };\nconst res = await Order.destroy({\n  where,\n  individualHooks: true\n});\n(0, _chai.expect)(res).to.gte(1);",
                "err": {},
                "isRoot": false,
                "uuid": "337f7f69-2c93-4034-978c-4f6af6e31bf6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "337f7f69-2c93-4034-978c-4f6af6e31bf6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "0c51932d-1b4c-445f-bf01-726c6e0074a7",
            "title": "Update",
            "fullFile": "/Users/alu/Desktop/test/graphql-microservice/test/model/Order.js",
            "file": "/test/model/Order.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update an order",
                "fullTitle": "Order Update should update an order",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const data = {\n  amount: randFloat()\n};\nif (order) {\n  order.amount = data.amount;\n  await order.save();\n  (0, _chai.expect)(order.amount).to.equal(data.amount);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "94b2a434-9bcf-4519-8f01-9b9a12deb238",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "94b2a434-9bcf-4519-8f01-9b9a12deb238"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "18b55b20-da77-47a5-8f8c-a66f05855df6",
            "title": "Query",
            "fullFile": "/Users/alu/Desktop/test/graphql-microservice/test/model/Order.js",
            "file": "/test/model/Order.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should query an order",
                "fullTitle": "Order Query should query an order",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(order).to.be.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "1dc222aa-bef9-425e-accb-3906a3dd445d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1dc222aa-bef9-425e-accb-3906a3dd445d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "c33199a4-a170-4b52-ba84-d8ba7168bc92",
        "title": "User",
        "fullFile": "/Users/alu/Desktop/test/graphql-microservice/test/model/User.js",
        "file": "/test/model/User.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "User \"before all\" hook",
            "timedOut": false,
            "duration": 31,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "models = await (0, _initSequelize2.default)();\nUser = models.User;\nuser = await User.findOne({ where });\nif (user === null) {\n  user = await User.create(_extends({}, data, { password: 'A1234567890' }));\n}",
            "err": {},
            "isRoot": false,
            "uuid": "be644119-ad90-4078-9a98-3dc9b94ee18d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "115c66c6-6425-451e-b67f-1a9239dd3324",
            "title": "Create User",
            "fullFile": "/Users/alu/Desktop/test/graphql-microservice/test/model/User.js",
            "file": "/test/model/User.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a user",
                "fullTitle": "User Create User should create a user",
                "timedOut": false,
                "duration": 305,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_lodash2.default.assign(deleteData, {\n  password: \"A123456\"\n});\nawait User.create(deleteData);",
                "err": {},
                "isRoot": false,
                "uuid": "fa8d9daa-0692-4804-9364-52a750625d4e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fa8d9daa-0692-4804-9364-52a750625d4e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 305,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "affff518-7b52-47ca-8328-a1484e64a27f",
            "title": "Delete user",
            "fullFile": "/Users/alu/Desktop/test/graphql-microservice/test/model/User.js",
            "file": "/test/model/User.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should should delete a user",
                "fullTitle": "User Delete user should should delete a user",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const user = await User.findOne({ where: deleteWhere });\n(0, _chai.expect)(user).to.exist;\nawait user.destroy();",
                "err": {},
                "isRoot": false,
                "uuid": "b29b4635-3f07-4e62-938d-4d5a723bc241",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b29b4635-3f07-4e62-938d-4d5a723bc241"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "0064a374-5901-4402-933d-3fa1446937d1",
            "title": "Update a uer",
            "fullFile": "/Users/alu/Desktop/test/graphql-microservice/test/model/User.js",
            "file": "/test/model/User.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a user",
                "fullTitle": "User Update a uer should update a user",
                "timedOut": false,
                "duration": 569,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const data = {\n  gender: parseInt(Math.random() * 10, 10) % 3\n  // const user = await User.findOne({where})\n};if (user) {\n  await user.update(data);\n  (0, _chai.expect)(user.gender).to.be.equal(data.gender);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "a36982b2-10b2-4571-bbd6-25232875a1b3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a36982b2-10b2-4571-bbd6-25232875a1b3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 569,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "ff3bceef-6e68-4551-958c-9c97f494cbb8",
            "title": "Query a user",
            "fullFile": "/Users/alu/Desktop/test/graphql-microservice/test/model/User.js",
            "file": "/test/model/User.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should query a user",
                "fullTitle": "User Query a user should query a user",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// const attributes = ['username', 'phoneNumber', 'email']\n// const user = await User.findOne({where, attributes})\n(0, _chai.expect)(user.dataValues).to.deep.include(data);",
                "err": {},
                "isRoot": false,
                "uuid": "8f9ec2d0-2f46-40df-8709-b81aab765b05",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8f9ec2d0-2f46-40df-8709-b81aab765b05"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "9af1d003-eb25-487b-bc49-0235eef88e21",
        "title": "User server test",
        "fullFile": "/Users/alu/Desktop/test/graphql-microservice/test/server/User.js",
        "file": "/test/server/User.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "50ef8516-99d4-4deb-9f6e-28d0c320b47b",
            "title": "query one user",
            "fullFile": "/Users/alu/Desktop/test/graphql-microservice/test/server/User.js",
            "file": "/test/server/User.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should query a user",
                "fullTitle": "User server test query one user should query a user",
                "timedOut": false,
                "duration": 54,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const data = {\n  data: {\n    user: {\n      id: userId,\n      phoneNumber: \"18674083822\",\n      email: \"18674083822@qq.com\"\n    }\n  }\n};\nconst query = `\n  query {\n    user(id: \"${userId}\") {\n      id\n      phoneNumber\n      email\n    }\n  }\n`;\nawait (0, _request2.default)({ query }, data);",
                "err": {},
                "isRoot": false,
                "uuid": "721a68f2-00ae-4302-bdaf-7ccab98d083c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "721a68f2-00ae-4302-bdaf-7ccab98d083c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 54,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "6a60c072-63ab-4783-8603-590b01802314",
            "title": "update a user",
            "fullFile": "/Users/alu/Desktop/test/graphql-microservice/test/server/User.js",
            "file": "/test/server/User.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a user",
                "fullTitle": "User server test update a user should update a user",
                "timedOut": false,
                "duration": 605,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const gender = parseInt(Math.random() * 10, 10) % 2;\nconst data = {\n  data: {\n    updateUser: {\n      changedUser: {\n        id: userId,\n        gender\n      }\n    }\n  }\n};\nconst query = `\n  mutation {\n    updateUser(input: {\n      id: \"${userId}\"\n      values: {\n        gender: ${gender}\n      }\n      clientMutationId: \"123\"\n    }) {\n      changedUser {\n        id\n        gender\n      }\n    }\n  }\n`;\nawait (0, _request2.default)({ query }, data);",
                "err": {},
                "isRoot": false,
                "uuid": "4fdf62ab-ecbf-413f-adc4-1123d20dd2c4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4fdf62ab-ecbf-413f-adc4-1123d20dd2c4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 605,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "f47fb92c-2e27-400b-83b4-5085966d876b",
        "title": "expect",
        "fullFile": "/Users/alu/Desktop/test/graphql-microservice/test/tutorial/expect.js",
        "file": "/test/tutorial/expect.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0d8b5b10-e33f-4785-9df3-764ee594fd87",
            "title": "chai",
            "fullFile": "/Users/alu/Desktop/test/graphql-microservice/test/tutorial/expect.js",
            "file": "/test/tutorial/expect.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be expect",
                "fullTitle": "expect chai should be expect",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Target object deeply (but not strictly) equals `{a: 1}`\n(0, _chai.expect)({ a: 1 }).to.deep.equal({ a: 1 });\n(0, _chai.expect)({ a: 1 }).to.not.equal({ a: 1 });\n// Target array deeply (but not strictly) includes `{a: 1}`\n(0, _chai.expect)([{ a: 1 }]).to.deep.include({ a: 1 });\n(0, _chai.expect)([{ a: 1 }]).to.not.include({ a: 1 });\n// Target object deeply (but not strictly) includes `x: {a: 1}`\n(0, _chai.expect)({ x: { a: 1 } }).to.deep.include({ x: { a: 1 } });\n(0, _chai.expect)({ x: { a: 1 } }).to.not.include({ x: { a: 1 } });\n// Target array deeply (but not strictly) has member `{a: 1}`\n(0, _chai.expect)([{ a: 1 }]).to.have.deep.members([{ a: 1 }]);\n(0, _chai.expect)([{ a: 1 }]).to.not.have.members([{ a: 1 }]);\n// Target set deeply (but not strictly) has key `{a: 1}`\n(0, _chai.expect)(new Set([{ a: 1 }])).to.have.deep.keys([{ a: 1 }]);\n(0, _chai.expect)(new Set([{ a: 1 }])).to.not.have.keys([{ a: 1 }]);\n// Target object deeply (but not strictly) has property `x: {a: 1}`\n(0, _chai.expect)({ x: { a: 1 } }).to.have.deep.property('x', { a: 1 });\n(0, _chai.expect)({ x: { a: 1 } }).to.not.have.property('x', { a: 1 });\n(0, _chai.expect)([1, 2]).to.have.ordered.members([1, 2]).but.not.have.ordered.members([2, 1]);\n(0, _chai.expect)([1, 2, 3]).to.include.ordered.members([1, 2]).but.not.include.ordered.members([2, 3]);\n(0, _chai.expect)(1).to.be.a('number', 'nooo why fail??');\n(0, _chai.expect)(1, 'nooo why fail??').to.be.a('number');\n(0, _chai.expect)({ a: 1, b: 2, c: 3 }).to.include.all.keys('a', 'b');\n(0, _chai.expect)({ a: 1, b: 2, c: 3 }).to.have.any.keys('a', 'b');\n(0, _chai.expect)([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n(0, _chai.expect)('foobar').to.match(/^foo/);",
                "err": {},
                "isRoot": false,
                "uuid": "aaa61772-1f48-48aa-812e-1bc0d07509c5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "aaa61772-1f48-48aa-812e-1bc0d07509c5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2018
}